Clean up your methods!
Lately we have been seeing a lot about clean code, a code that is easy to read and maintain, a code that is elegant and even more important, that won't make other programmers having a bad time reading/maintaining it.
This post is about basic changes we can do to make the methods we create more elegant and easy to understand.
A good start would be reeding this book, Clean Code: A Handbook of Agile Software Craftmanship, but if you want something more summarized here we go:

- Meaningful Names:
When I first started to code, I didn't like variables and methods with big names, I used to code within bad IDE's and big names made things more complicated, but I was wrong.
The name's length of your methods/variable is not a big deal(when coding in a good IDE), the most important is the choose intention-revealing names, this will help whom is reading your code to make an idea of what it is about.
A BAD example would be:

int d; // time in days
int gtmsp;

What does it mean 'd' in the real life? Imagine that this variable 'd' is being used somewhere far away from its initialization, the reader would have to go back to its initialization, read the comment to understand what this variable is about? 
Try to choose pronounceable names, we are good at recognizing words, how to read 'gtmsp'? I would rather read:

int timeInDays;
int generatedTimestamp;

Choose one word for concept, see the following example:

List<Event> fetchAllEvents();
List<Note> getAllNotes();

In one method we choose the word 'fetch' in the other we choose the word 'get', what is the difference between these methods? Aren't they doing the same action? When we read different names/words we tend to infer that they are doing different things, this may lead to miss interpretation. If the methods are doing the same action/concept choose the same word to this action.

 - Size matters!

 Seriusly, is there something worse than trying to find a BUG within someone's big messy method? I always think about rewriting it before I remember that it may be doing things I would never imagine.

 So make your methods small! How small? Smaller than you think!
 In the book the author says that hardly your methods would need more than 20 LINES. I try to follow this bounds and I feel like they become easier to read. Break big methods into smaller ones.

 - Do one thing! No side effects!

 Sometimes we create methods that do more than one thing and we don't even realize that, see the following method:

public boolean validateCredentials(String email, String senha){
	boolean isCorrectCredentials = server.validadeCredentials(email, senha);
	if(isCorrectCredentials){
		login();
	}
	return isCorrectCredentials;
}

Even though this method is small and with intention-revealing names, it is doing more than one thing and there is a side-effect(login) calling it. It could bring unexpected results in case a developer decide to call it just to 'validateCredentials', it is not obvious that this method is making a login. A more elegant solution would be:

	public void loginFlow(String email, String password){
		boolean isCorrectCredentials = validateCredentials(email, password);
		if(isCorrectCredentials){
			login();
		} else {
			// whatever 
		}		
	}

	public boolean validateCredentials(String email, String password){
		return server.validateCredentials(email, password);
	}

This way, the method 'validateCRedentials' is only validating credentials, no side effect.

* - Blocks and Abstraction Levels:
A clean method do not have a lot channing blocks(if/else/while), it has a low cyclomatic complexity. A method that have only 1 or 2 blocks is easier to read since there is less paths to follow, this way the code is less susceptible to errors making it hard for bugs to hide.

Every method should only have one abstraction level, see the example:

	public boolean saveNote(String date, String text){
		String finalText = text.append("\n").append(date);
		Note note = Note.from(finalText);
		return server.saveNote(note);
	}

This method has different abstraction levels. There is a high level concept, the static constructor 'Note.from' and also a call to a 'server.saveNote()', it means that the implementation of this concepts are hidden from us, we don't really need to understand it, that is a high abstraction level.
There is also a low abstraction level, the method 'append' is modifying a string by appending a '\n' and the date into the original String, we can see the real implementation here, it is not hidden, which means that this concept is a low abstraction level.

When you mix different levels of abstraction the method becomes more dificult to read.

* - Methods Parameters:
It would be very good if all the methods we call didn't have any parameter, we wouldn't have to worry about its type, default values and state and so on.
So try to build your methods so they require the least parameters as possible. If one method requires more than 3 parameters probably it is doing more than ONE THING, so try to break it into smaller methods. See the following example:

	public boolean scheduleRomanticDinner(String name1, String name2, int table, Date time){
		boolean isTableAvailable = isTableAvailableAtTime(table, time);
		if(isTableAvailable){
			server.confirmSchedule(name1, name2, table, time);
		} else {
			//whatever
		}
	}

	This method is small and clean but it is using its 4 parameters, how to remove the need of all of them?
	Create an 'Argument Object', that is a object that holds this 4 parameters, see the result:

	public boolean scheduleRomanticDinner(RomanticDinnerRequest request){
		boolean isTableAvailable = isTableAvailableAtTime(request.table(), request.time());
		if(isTableAvailable){
			server.confirmSchedule(request.name1(), request.name2(), request.table(), request.time());
		} else {
			//whatever
		}
	}

What are the benefits of an Argument Object? Imagine that the method 'scheduleRomanticDinner' is being called 100 times within the code, what would happen if it was required to add one more parameter? This method would have to be rewritten 100 times. Using a Argument Object this change will affect only the object initialization.

All this practices aim to make it easier for your code to be changed and read, we know that new requirements will come up and scopes will be changed, we can not allow that small changes affect the structure we have build, by the end of the day changes are one of the few centanties we have at Software Development.







--------------------------------


Limpe seus métodos!
Ultimamente muito tem se falado no desenvolvimento de código clean, que seja fácil de ler e dar manutenção, um código que seja bonito e elegante, mais importante ainda, não vai fazer ninguem ter 'bad times' reading it.
Este post vai falar um pouco sobre coisas básicas que podemos fazer para deixar os métodos que criamos mais elegantes e agradáveis de ler.
Um bom começo seria ler este livro, Clean Code: A Handbook of Agile Software Craftsmanship, mas se voce quer algo mais resumido aqui vai:

* - Meaningful Names:

Quando comecei a programar, não gostava de variaveis e métodos com nomes grandes, eu usava IDE's ruins e nomes grandes tornavam as coisas mais complicadas, eu estava muito errado.
O tamanho do nome de sua variavel ou método não é grande coisa, o importante é usar intention-revealing names, isto vai ajudar a quem ler ser código já ter uma nocão do que se trata.
Um exemplo ruim seria:

int d; // time in days
int gtmsp;

O que significa 'd' na vida real? Imagine que esta variável 'd' esteja sendo usada em um trecho longe de sua inicialização, o leitor terá que voltar a onde a variavel foi declarada para saber do que se trata? Muito melhor seria, sem a necessidade de comentários:

int timeInDays;

Procure usar nomes pronunciáveis, somos bons em reconhecer palavras, como ler 'gtmsp'? Prefira:

int generatedTimestamp;

Use uma palavra por conceito, veja por exemplo os seguintes métodos:

List<Event> fetchAllEvents();
List<Note> getAllNotes();

Em um método utilizamos a palavra 'fetch' no outro 'get', qual a diferença? Isto pode levar a interpretaçoes erradas. Se os métodos estão fazendo a mesma coisa então use um mesmo nome sempre que o conceito for usado.


* - Caracteristicas do método:

Sério, existe algo mais desanimador que saber que existe um BUG dentro de um método gigante, que faz um monte de coisa? Eu sempre me pergunto se posso reescrever o método, porém o fato de ele ser grande também implica que provavelmente ele esteja fazendo algo que eu nem imagine.

Tamanho: 
Faça seus métodos pequenos! Quão pequeno? Menor do que esteja pensando! 
No livro o autor diz que dificilmente seus métodos deveriam ser maiores que 20 LINHAS! Eu procuro seguir este limite e sinto que os métodos ficam mais simples de entender.

Faça uma coisa e evite efeitos colaterais:
As vezes criamos métodos que fazem mais de uma coisa, muitas vezes nem percebemos, veja o seguinte metodo:

	public boolean validateCredentials(String email, String senha){
		boolean isCorrectCredentials = server.validadeCredentials(email, senha);
		if(isCorrectCredentials){
			login();
		}
		return isCorrectCredentials;
	}

Este método, apesar de ser pequeno e possuir intention-revealing names, está fazendo mais de uma coisa e possui efeito colateral(realiza login). Isto pode causar um resultado inexperado, caso algum desenvolvedor ao ler o método, utilize-o apenas para validar se credenciais estão corretas sem necessariamente querer o login. Uma solução um pouco mais elegante seria:

	public void loginFlow(String email, String password){
		boolean isCorrectCredentials = validateCredentials(email, password);
		if(isCorrectCredentials){
			login();
		} else {
			// whatever 
		}		
	}

	public boolean validateCredentials(String email, String password){
		return server.validateCredentials(email, password);
	}
Desta maneira, o método validateCredentials, apenas valida as credenciais, sem efeito colateral.

* - Blocks and Abstraction Levels:
Um método elegante não possui muitos blocos(if/else/while) encadeados. Um método que possui apenas 1 ou 2 blocos encadeados é mais fácil de ler pois existe menos caminhos a se percorrer, desta forma fica mais difícil para os bugs e falhas se esconderem. 

Cada método deve possuir um nível de abstração, veja o exemplo:
	
	public boolean saveNote(String date, String text){
		String finalText = noteText.append("\n").append(date);
		Note note = Note.from(finalText);
		return server.saveNote(note);
	}
Este método utiliza níveis de abstrações diferentes, existem conceitos de alto nível, como o construtor estático Note.from() e de baixo nível, como a operação de append("\n"). Misturar diferentes níveis de abstração em um mesmo método torna-o mais confuso e difícil de ler.


* - Parametros dos métodos:
	Seria muito bom se todos os métodos que utilizássemos não fosse preciso passar nenhum parâmetro, não teríamos que nos preocupar sobre o tipo, valores default e estado dos mesmo.
	Tente passar a menor quantidade de parametros possível, se um método requer mais que 3 parâmetros provavelmente ele esteja fazendo mais que uma coisa, então é possível quebrar em métodos menores.
	Veja o seguinte exemplo:

	public boolean scheduleRomanticDinner(String name1, String name2, int table, Date time){
		boolean isTableAvailable = isTableAvailableAtTime(table, time);
		if(isTableAvailable){
			confirmSchedule(name1, name2, table, time);
		} else {
			//whatever
		}
	}

	O método acima está usando as 4 variáveis, como remover a necessidade dos parâmetros?
	Crie um 'Argument Object', isto é, um objeto que possua estas quatro variáveis, veja o resultado:

	public boolean scheduleRomanticDinner(RomanticDinnerRequest request){
		boolean isTableAvailable = isTableAvailableAtTime(request.table(), request.time());
		if(isTableAvailable){
			confirmSchedule(request.name1(), request.name2(), request.table(), request.time());
		} else {
			//whatever
		}
	}
	Quais os benefícios de criar um 'Argument Object'? Imagine que o método scheduleRomanticDinner esteja sendo usado 100 vezes no código, o que aconteceria se, fosse necessário passar um parametro a mais? O método terá que ser reescrito nos 100 lugares onde foi chamado. Já com o Argument Object, esta mudança afetaria apenas o construtor do objeto.

	Enfim, todas estas práticas visam em geral deixar o código mais simples, fácil de ser entendido e adaptado, pois sabemos que os requisitos vão ser alterado, não podemos deixar que pequenas mudanças afetem toda a estrutura de um código, afinal mudanças são uma das poucas certezas que temos em desenvolvimento de software. 




